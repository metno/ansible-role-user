# vim: ai et ts=2 st=2 sw=2 :
---
- name: Check if we're running supported os
  ansible.builtin.assert:
    fail_msg: "{{ role_name }} only supports ubuntu versions 20, 22, 24, centos versions 7, centos strem versions 8, rhel versions 8, 9!"
    success_msg: "{{ role_name }} supports {{ ansible_distribution }} version {{ ansible_distribution_version }}"
    quiet: "{{ not ansible_check_mode }}"
    that:
      ( ansible_distribution == "Ubuntu" and ansible_distribution_version|int in [20, 22, 24] )
      or ( ansible_distribution == "CentOS" and ansible_distribution_major_version|int in [7, 8] )
      or ( ansible_distribution|lower == "redhat" and ansible_distribution_major_version|int in [8, 9] )

- name: Groups
  ansible.builtin.group:
    name: '{{ item.group }}'
    gid: '{{ item.gid | default(omit) }}'
    system: '{{ item.system | default(false) }}'
    state: '{{ "present" if item.enabled | default(false) else "absent" }}'
  loop: '{{ user_groups }}'
  loop_control:
    label: '{{ item.group }} ({% if item.enabled %}present{% else %}absent{% endif %})'

- name: Personal groups
  ansible.builtin.group:
    name: '{{ item.group | default(item.user) }}'
    gid: '{{ item.gid | default(omit) }}'
    system: '{{ item.system | default(false) }}'
    state: '{{ "present" if item.enabled | default(false) else "absent" }}'
  loop: '{{ user_users }}'
  loop_control:
    label: '{{ item.group | default(item.user) }} ({% if item.enabled %}present{% else %}absent{% endif %})'

- name: Users
  ansible.builtin.user:
    comment: '{{ item.comment | default("") }}'
    create_home: '{{ item.create_home | default(true) }}'
    group: '{{ item.group | default(item.user) }}'
    groups: '{{ item.groups | default([]) }}'
    name: '{{ item.user }}'
    password: '{{ item.password | default(omit) }}'
    password_lock: '{{ true if item.password is not defined and not item.password_nolock | default(false) else false }}'
    remove: '{{ item.remove | default(false) }}'
    shell: '{{ item.shell | default("/bin/bash") }}'
    state: '{{ "present" if item.enabled | default(false) else "absent" }}'
    system: '{{ item.system | default(false) }}'
    uid: '{{ item.uid | default(omit) }}'
  loop: '{{ user_users }}'
  loop_control:
    label: '{{ item.user }} ({% if item.enabled %}present{% else %}absent{% endif %})'
  ignore_errors: '{{ ansible_check_mode }}'

- name: Verify enabled and disabled users
  ansible.builtin.getent:
    database: passwd
    key: '{{ item.user }}'
  register: getent_users
  failed_when: getent_users.failed == item.enabled | default(false)
  loop: '{{ user_users }}'
  loop_control:
    label: '{{ item.user }} ({% if item.enabled %}present{% else %}absent{% endif %})'

- name: Create central directory for authorized_keys
  when: user_authorized_keys_central_directory | default(false)
  ansible.builtin.file:
    path: /etc/ssh/authorized_keys
    mode: '0750'
    owner: root
    group: root

- name: Write authorized_keys
  ansible.posix.authorized_key:
    user: >-
      {%- if user_authorized_keys_central_directory | default(false) -%}
        root
      {%- else -%}
        {{ item.user }}
      {%- endif -%}
    key: '{{ item.key }}'
    path: >-
      {%- if user_authorized_keys_central_directory | default(false) -%}
        /etc/ssh/authorized_keys/{{ item.user }}
      {%- else -%}
        {{ omit }}
      {%- endif -%}
    key_options: |
      {{ item.restrict | default(user_default_restrict) }}
      {%- if item.allow_ips | default(user_default_allow_ips) | length > 0 -%}
        ,from={{ '"' + item.allow_ips | default(user_default_allow_ips) | join(',') + '"' }}
      {%- endif -%}
    state: >-
      {%- if item.enabled | default(false) -%}
        present
      {%- else -%}
        absent
      {%- endif -%}
    manage_dir: '{{ not user_authorized_keys_central_directory | default(false) }}'
    exclusive: '{{ item.exclusive | default(true) }}'
    comment: >-
      {%- if user_authorized_keys_central_directory | default(false) -%}
        {{ omit }}
      {%- else -%}
        Ansible managed
      {%- endif -%}
  loop: '{{ user_users | selectattr("enabled", "defined") | selectattr("enabled") | selectattr("key", "defined") }}'
  loop_control:
    label: '{{ item.user }}'

- name: Remove or keep authorized_keys
  ansible.builtin.file:
    path: >-
      {%- if user_authorized_keys_central_directory | default(false) -%}
        /etc/ssh/authorized_keys/{{ item.user }}
      {%- else -%}
        /home/{{ item.user }}/.ssh/authorized_keys
      {%- endif -%}
    state: >-
      {%- if item.key | default(false) and item.enabled | default(false) -%}
        file
      {%- else -%}
        absent
      {%- endif -%}
    mode: '0600'
  loop: '{{ user_users }}'
  loop_control:
    label: '{{ item.user }} ({% if item.key | default(false) and item.enabled | default(false) %}keep{% else %}remove{% endif %})'
  when: not ansible_check_mode

- name: Enable sudo
  ansible.builtin.template:
    src: 'sudo{% if item.enable_sudo_password | default(false) %}-password{% endif %}.j2'
    dest: '/etc/sudoers.d/{{ item.user }}'
    mode: '0440'
    owner: root
    group: root
    validate: 'bash -c "cat %s | visudo -cf-"'
  loop: '{{ user_users | selectattr("enabled", "defined") | selectattr("enabled") | selectattr("sudo", "defined") | selectattr("sudo") }}'
  loop_control:
    label: '{{ item.user }}'

- name: Remove or keep sudoers files
  ansible.builtin.file:
    path: '/etc/sudoers.d/{{ item.user }}'
    state: >-
      {%- if item.sudo | default(false) and item.enabled | default(false) -%}
        file
      {%- else -%}
        absent
      {%- endif -%}
    mode: '0440'
  loop: '{{ user_users }}'
  loop_control:
    label: '{{ item.user }} ({% if item.sudo | default(false) and item.enabled | default(false) %}keep{% else %}remove{% endif %})'
  when: not ansible_check_mode
